// Generated by gencpp from file dnb_msgs/ConfigureDatastoreExternalSourceResponse.msg
// DO NOT EDIT!


#ifndef DNB_MSGS_MESSAGE_CONFIGUREDATASTOREEXTERNALSOURCERESPONSE_H
#define DNB_MSGS_MESSAGE_CONFIGUREDATASTOREEXTERNALSOURCERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dnb_msgs
{
template <class ContainerAllocator>
struct ConfigureDatastoreExternalSourceResponse_
{
  typedef ConfigureDatastoreExternalSourceResponse_<ContainerAllocator> Type;

  ConfigureDatastoreExternalSourceResponse_()
    : result_code(0)
    , result_message()  {
    }
  ConfigureDatastoreExternalSourceResponse_(const ContainerAllocator& _alloc)
    : result_code(0)
    , result_message(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _result_code_type;
  _result_code_type result_code;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _result_message_type;
  _result_message_type result_message;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SUCCESS)
  #undef SUCCESS
#endif
#if defined(_WIN32) && defined(INVALID_SOURCE)
  #undef INVALID_SOURCE
#endif
#if defined(_WIN32) && defined(INVALID_ENTRY)
  #undef INVALID_ENTRY
#endif

  enum {
    SUCCESS = 0,
    INVALID_SOURCE = 1,
    INVALID_ENTRY = 2,
  };


  typedef boost::shared_ptr< ::dnb_msgs::ConfigureDatastoreExternalSourceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dnb_msgs::ConfigureDatastoreExternalSourceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ConfigureDatastoreExternalSourceResponse_

typedef ::dnb_msgs::ConfigureDatastoreExternalSourceResponse_<std::allocator<void> > ConfigureDatastoreExternalSourceResponse;

typedef boost::shared_ptr< ::dnb_msgs::ConfigureDatastoreExternalSourceResponse > ConfigureDatastoreExternalSourceResponsePtr;
typedef boost::shared_ptr< ::dnb_msgs::ConfigureDatastoreExternalSourceResponse const> ConfigureDatastoreExternalSourceResponseConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dnb_msgs::ConfigureDatastoreExternalSourceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dnb_msgs::ConfigureDatastoreExternalSourceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dnb_msgs::ConfigureDatastoreExternalSourceResponse_<ContainerAllocator1> & lhs, const ::dnb_msgs::ConfigureDatastoreExternalSourceResponse_<ContainerAllocator2> & rhs)
{
  return lhs.result_code == rhs.result_code &&
    lhs.result_message == rhs.result_message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dnb_msgs::ConfigureDatastoreExternalSourceResponse_<ContainerAllocator1> & lhs, const ::dnb_msgs::ConfigureDatastoreExternalSourceResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dnb_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dnb_msgs::ConfigureDatastoreExternalSourceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dnb_msgs::ConfigureDatastoreExternalSourceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dnb_msgs::ConfigureDatastoreExternalSourceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dnb_msgs::ConfigureDatastoreExternalSourceResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dnb_msgs::ConfigureDatastoreExternalSourceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dnb_msgs::ConfigureDatastoreExternalSourceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dnb_msgs::ConfigureDatastoreExternalSourceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e623f0c90342060a328c0ac82e7a4d36";
  }

  static const char* value(const ::dnb_msgs::ConfigureDatastoreExternalSourceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe623f0c90342060aULL;
  static const uint64_t static_value2 = 0x328c0ac82e7a4d36ULL;
};

template<class ContainerAllocator>
struct DataType< ::dnb_msgs::ConfigureDatastoreExternalSourceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dnb_msgs/ConfigureDatastoreExternalSourceResponse";
  }

  static const char* value(const ::dnb_msgs::ConfigureDatastoreExternalSourceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dnb_msgs::ConfigureDatastoreExternalSourceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 result_code\n"
"int32 SUCCESS = 0\n"
"int32 INVALID_SOURCE = 1\n"
"int32 INVALID_ENTRY = 2\n"
"string result_message\n"
;
  }

  static const char* value(const ::dnb_msgs::ConfigureDatastoreExternalSourceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dnb_msgs::ConfigureDatastoreExternalSourceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result_code);
      stream.next(m.result_message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConfigureDatastoreExternalSourceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dnb_msgs::ConfigureDatastoreExternalSourceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dnb_msgs::ConfigureDatastoreExternalSourceResponse_<ContainerAllocator>& v)
  {
    s << indent << "result_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.result_code);
    s << indent << "result_message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.result_message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DNB_MSGS_MESSAGE_CONFIGUREDATASTOREEXTERNALSOURCERESPONSE_H
