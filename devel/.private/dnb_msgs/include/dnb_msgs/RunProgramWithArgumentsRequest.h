// Generated by gencpp from file dnb_msgs/RunProgramWithArgumentsRequest.msg
// DO NOT EDIT!


#ifndef DNB_MSGS_MESSAGE_RUNPROGRAMWITHARGUMENTSREQUEST_H
#define DNB_MSGS_MESSAGE_RUNPROGRAMWITHARGUMENTSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dnb_msgs/Program.h>

namespace dnb_msgs
{
template <class ContainerAllocator>
struct RunProgramWithArgumentsRequest_
{
  typedef RunProgramWithArgumentsRequest_<ContainerAllocator> Type;

  RunProgramWithArgumentsRequest_()
    : program()  {
    }
  RunProgramWithArgumentsRequest_(const ContainerAllocator& _alloc)
    : program(_alloc)  {
  (void)_alloc;
    }



   typedef  ::dnb_msgs::Program_<ContainerAllocator>  _program_type;
  _program_type program;





  typedef boost::shared_ptr< ::dnb_msgs::RunProgramWithArgumentsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dnb_msgs::RunProgramWithArgumentsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RunProgramWithArgumentsRequest_

typedef ::dnb_msgs::RunProgramWithArgumentsRequest_<std::allocator<void> > RunProgramWithArgumentsRequest;

typedef boost::shared_ptr< ::dnb_msgs::RunProgramWithArgumentsRequest > RunProgramWithArgumentsRequestPtr;
typedef boost::shared_ptr< ::dnb_msgs::RunProgramWithArgumentsRequest const> RunProgramWithArgumentsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dnb_msgs::RunProgramWithArgumentsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dnb_msgs::RunProgramWithArgumentsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dnb_msgs::RunProgramWithArgumentsRequest_<ContainerAllocator1> & lhs, const ::dnb_msgs::RunProgramWithArgumentsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.program == rhs.program;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dnb_msgs::RunProgramWithArgumentsRequest_<ContainerAllocator1> & lhs, const ::dnb_msgs::RunProgramWithArgumentsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dnb_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dnb_msgs::RunProgramWithArgumentsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dnb_msgs::RunProgramWithArgumentsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dnb_msgs::RunProgramWithArgumentsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dnb_msgs::RunProgramWithArgumentsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dnb_msgs::RunProgramWithArgumentsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dnb_msgs::RunProgramWithArgumentsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dnb_msgs::RunProgramWithArgumentsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3a10957057a642978ddf35d5ffec26a3";
  }

  static const char* value(const ::dnb_msgs::RunProgramWithArgumentsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3a10957057a64297ULL;
  static const uint64_t static_value2 = 0x8ddf35d5ffec26a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::dnb_msgs::RunProgramWithArgumentsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dnb_msgs/RunProgramWithArgumentsRequest";
  }

  static const char* value(const ::dnb_msgs::RunProgramWithArgumentsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dnb_msgs::RunProgramWithArgumentsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Program program\n"
"\n"
"================================================================================\n"
"MSG: dnb_msgs/Program\n"
"string name\n"
"Argument[] arguments\n"
"================================================================================\n"
"MSG: dnb_msgs/Argument\n"
"string name\n"
"string type\n"
"string value\n"
;
  }

  static const char* value(const ::dnb_msgs::RunProgramWithArgumentsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dnb_msgs::RunProgramWithArgumentsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.program);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RunProgramWithArgumentsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dnb_msgs::RunProgramWithArgumentsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dnb_msgs::RunProgramWithArgumentsRequest_<ContainerAllocator>& v)
  {
    s << indent << "program: ";
    s << std::endl;
    Printer< ::dnb_msgs::Program_<ContainerAllocator> >::stream(s, indent + "  ", v.program);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DNB_MSGS_MESSAGE_RUNPROGRAMWITHARGUMENTSREQUEST_H
