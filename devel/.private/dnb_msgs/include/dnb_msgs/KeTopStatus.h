// Generated by gencpp from file dnb_msgs/KeTopStatus.msg
// DO NOT EDIT!


#ifndef DNB_MSGS_MESSAGE_KETOPSTATUS_H
#define DNB_MSGS_MESSAGE_KETOPSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dnb_msgs
{
template <class ContainerAllocator>
struct KeTopStatus_
{
  typedef KeTopStatus_<ContainerAllocator> Type;

  KeTopStatus_()
    : buttons_active()
    , second_active(false)
    , teach_mode(false)
    , auto_mode(false)
    , enabling_key_pressed(false)
    , jog_mode(0)
    , msg()  {
    }
  KeTopStatus_(const ContainerAllocator& _alloc)
    : buttons_active(_alloc)
    , second_active(false)
    , teach_mode(false)
    , auto_mode(false)
    , enabling_key_pressed(false)
    , jog_mode(0)
    , msg(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _buttons_active_type;
  _buttons_active_type buttons_active;

   typedef uint8_t _second_active_type;
  _second_active_type second_active;

   typedef uint8_t _teach_mode_type;
  _teach_mode_type teach_mode;

   typedef uint8_t _auto_mode_type;
  _auto_mode_type auto_mode;

   typedef uint8_t _enabling_key_pressed_type;
  _enabling_key_pressed_type enabling_key_pressed;

   typedef uint8_t _jog_mode_type;
  _jog_mode_type jog_mode;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _msg_type;
  _msg_type msg;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ACK_BUTTON)
  #undef ACK_BUTTON
#endif
#if defined(_WIN32) && defined(START_BUTTON)
  #undef START_BUTTON
#endif
#if defined(_WIN32) && defined(STEP_BUTTON)
  #undef STEP_BUTTON
#endif
#if defined(_WIN32) && defined(MENU_BUTTON)
  #undef MENU_BUTTON
#endif
#if defined(_WIN32) && defined(WORLD)
  #undef WORLD
#endif
#if defined(_WIN32) && defined(BASE)
  #undef BASE
#endif
#if defined(_WIN32) && defined(TOOL)
  #undef TOOL
#endif
#if defined(_WIN32) && defined(JOINTS)
  #undef JOINTS
#endif

  enum {
    ACK_BUTTON = 0u,
    START_BUTTON = 13u,
    STEP_BUTTON = 18u,
    MENU_BUTTON = 23u,
    WORLD = 0u,
    BASE = 1u,
    TOOL = 2u,
    JOINTS = 3u,
  };


  typedef boost::shared_ptr< ::dnb_msgs::KeTopStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dnb_msgs::KeTopStatus_<ContainerAllocator> const> ConstPtr;

}; // struct KeTopStatus_

typedef ::dnb_msgs::KeTopStatus_<std::allocator<void> > KeTopStatus;

typedef boost::shared_ptr< ::dnb_msgs::KeTopStatus > KeTopStatusPtr;
typedef boost::shared_ptr< ::dnb_msgs::KeTopStatus const> KeTopStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dnb_msgs::KeTopStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dnb_msgs::KeTopStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dnb_msgs::KeTopStatus_<ContainerAllocator1> & lhs, const ::dnb_msgs::KeTopStatus_<ContainerAllocator2> & rhs)
{
  return lhs.buttons_active == rhs.buttons_active &&
    lhs.second_active == rhs.second_active &&
    lhs.teach_mode == rhs.teach_mode &&
    lhs.auto_mode == rhs.auto_mode &&
    lhs.enabling_key_pressed == rhs.enabling_key_pressed &&
    lhs.jog_mode == rhs.jog_mode &&
    lhs.msg == rhs.msg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dnb_msgs::KeTopStatus_<ContainerAllocator1> & lhs, const ::dnb_msgs::KeTopStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dnb_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dnb_msgs::KeTopStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dnb_msgs::KeTopStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dnb_msgs::KeTopStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dnb_msgs::KeTopStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dnb_msgs::KeTopStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dnb_msgs::KeTopStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dnb_msgs::KeTopStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "86f0ec71e85ea498020b5729ce416bde";
  }

  static const char* value(const ::dnb_msgs::KeTopStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x86f0ec71e85ea498ULL;
  static const uint64_t static_value2 = 0x020b5729ce416bdeULL;
};

template<class ContainerAllocator>
struct DataType< ::dnb_msgs::KeTopStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dnb_msgs/KeTopStatus";
  }

  static const char* value(const ::dnb_msgs::KeTopStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dnb_msgs::KeTopStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 ACK_BUTTON=0\n"
"uint8 START_BUTTON=13\n"
"uint8 STEP_BUTTON=18\n"
"uint8 MENU_BUTTON=23\n"
"uint8[] buttons_active\n"
"\n"
"bool second_active\n"
"bool teach_mode\n"
"bool auto_mode\n"
"bool enabling_key_pressed\n"
"\n"
"uint8 WORLD=0\n"
"uint8 BASE=1\n"
"uint8 TOOL=2\n"
"uint8 JOINTS=3\n"
"uint8 jog_mode\n"
"\n"
"string msg\n"
;
  }

  static const char* value(const ::dnb_msgs::KeTopStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dnb_msgs::KeTopStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.buttons_active);
      stream.next(m.second_active);
      stream.next(m.teach_mode);
      stream.next(m.auto_mode);
      stream.next(m.enabling_key_pressed);
      stream.next(m.jog_mode);
      stream.next(m.msg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct KeTopStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dnb_msgs::KeTopStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dnb_msgs::KeTopStatus_<ContainerAllocator>& v)
  {
    s << indent << "buttons_active[]" << std::endl;
    for (size_t i = 0; i < v.buttons_active.size(); ++i)
    {
      s << indent << "  buttons_active[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.buttons_active[i]);
    }
    s << indent << "second_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.second_active);
    s << indent << "teach_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.teach_mode);
    s << indent << "auto_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_mode);
    s << indent << "enabling_key_pressed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enabling_key_pressed);
    s << indent << "jog_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.jog_mode);
    s << indent << "msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.msg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DNB_MSGS_MESSAGE_KETOPSTATUS_H
