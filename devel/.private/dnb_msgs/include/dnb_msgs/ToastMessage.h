// Generated by gencpp from file dnb_msgs/ToastMessage.msg
// DO NOT EDIT!


#ifndef DNB_MSGS_MESSAGE_TOASTMESSAGE_H
#define DNB_MSGS_MESSAGE_TOASTMESSAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dnb_msgs/ToastTranslation.h>

namespace dnb_msgs
{
template <class ContainerAllocator>
struct ToastMessage_
{
  typedef ToastMessage_<ContainerAllocator> Type;

  ToastMessage_()
    : type(0)
    , sender_id()
    , message()  {
    }
  ToastMessage_(const ContainerAllocator& _alloc)
    : type(0)
    , sender_id(_alloc)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _sender_id_type;
  _sender_id_type sender_id;

   typedef std::vector< ::dnb_msgs::ToastTranslation_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::dnb_msgs::ToastTranslation_<ContainerAllocator> >> _message_type;
  _message_type message;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(INFO)
  #undef INFO
#endif
#if defined(_WIN32) && defined(SUCCESS)
  #undef SUCCESS
#endif
#if defined(_WIN32) && defined(WARNING)
  #undef WARNING
#endif
#if defined(_WIN32) && defined(ERROR)
  #undef ERROR
#endif

  enum {
    INFO = 0u,
    SUCCESS = 1u,
    WARNING = 2u,
    ERROR = 3u,
  };


  typedef boost::shared_ptr< ::dnb_msgs::ToastMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dnb_msgs::ToastMessage_<ContainerAllocator> const> ConstPtr;

}; // struct ToastMessage_

typedef ::dnb_msgs::ToastMessage_<std::allocator<void> > ToastMessage;

typedef boost::shared_ptr< ::dnb_msgs::ToastMessage > ToastMessagePtr;
typedef boost::shared_ptr< ::dnb_msgs::ToastMessage const> ToastMessageConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dnb_msgs::ToastMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dnb_msgs::ToastMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dnb_msgs::ToastMessage_<ContainerAllocator1> & lhs, const ::dnb_msgs::ToastMessage_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.sender_id == rhs.sender_id &&
    lhs.message == rhs.message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dnb_msgs::ToastMessage_<ContainerAllocator1> & lhs, const ::dnb_msgs::ToastMessage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dnb_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dnb_msgs::ToastMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dnb_msgs::ToastMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dnb_msgs::ToastMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dnb_msgs::ToastMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dnb_msgs::ToastMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dnb_msgs::ToastMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dnb_msgs::ToastMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "450139b6154bf1387b145b5b52133212";
  }

  static const char* value(const ::dnb_msgs::ToastMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x450139b6154bf138ULL;
  static const uint64_t static_value2 = 0x7b145b5b52133212ULL;
};

template<class ContainerAllocator>
struct DataType< ::dnb_msgs::ToastMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dnb_msgs/ToastMessage";
  }

  static const char* value(const ::dnb_msgs::ToastMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dnb_msgs::ToastMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 INFO=0\n"
"uint8 SUCCESS=1\n"
"uint8 WARNING=2\n"
"uint8 ERROR=3\n"
"uint8 type\n"
"string sender_id\n"
"ToastTranslation[] message\n"
"================================================================================\n"
"MSG: dnb_msgs/ToastTranslation\n"
"string language_code\n"
"string value\n"
;
  }

  static const char* value(const ::dnb_msgs::ToastMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dnb_msgs::ToastMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.sender_id);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ToastMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dnb_msgs::ToastMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dnb_msgs::ToastMessage_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "sender_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.sender_id);
    s << indent << "message[]" << std::endl;
    for (size_t i = 0; i < v.message.size(); ++i)
    {
      s << indent << "  message[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::dnb_msgs::ToastTranslation_<ContainerAllocator> >::stream(s, indent + "    ", v.message[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DNB_MSGS_MESSAGE_TOASTMESSAGE_H
