// Generated by gencpp from file dnb_msgs/ToastTranslation.msg
// DO NOT EDIT!


#ifndef DNB_MSGS_MESSAGE_TOASTTRANSLATION_H
#define DNB_MSGS_MESSAGE_TOASTTRANSLATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dnb_msgs
{
template <class ContainerAllocator>
struct ToastTranslation_
{
  typedef ToastTranslation_<ContainerAllocator> Type;

  ToastTranslation_()
    : language_code()
    , value()  {
    }
  ToastTranslation_(const ContainerAllocator& _alloc)
    : language_code(_alloc)
    , value(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _language_code_type;
  _language_code_type language_code;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _value_type;
  _value_type value;





  typedef boost::shared_ptr< ::dnb_msgs::ToastTranslation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dnb_msgs::ToastTranslation_<ContainerAllocator> const> ConstPtr;

}; // struct ToastTranslation_

typedef ::dnb_msgs::ToastTranslation_<std::allocator<void> > ToastTranslation;

typedef boost::shared_ptr< ::dnb_msgs::ToastTranslation > ToastTranslationPtr;
typedef boost::shared_ptr< ::dnb_msgs::ToastTranslation const> ToastTranslationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dnb_msgs::ToastTranslation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dnb_msgs::ToastTranslation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dnb_msgs::ToastTranslation_<ContainerAllocator1> & lhs, const ::dnb_msgs::ToastTranslation_<ContainerAllocator2> & rhs)
{
  return lhs.language_code == rhs.language_code &&
    lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dnb_msgs::ToastTranslation_<ContainerAllocator1> & lhs, const ::dnb_msgs::ToastTranslation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dnb_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dnb_msgs::ToastTranslation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dnb_msgs::ToastTranslation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dnb_msgs::ToastTranslation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dnb_msgs::ToastTranslation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dnb_msgs::ToastTranslation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dnb_msgs::ToastTranslation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dnb_msgs::ToastTranslation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "29b983d22ef0190726766d474d9c2435";
  }

  static const char* value(const ::dnb_msgs::ToastTranslation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x29b983d22ef01907ULL;
  static const uint64_t static_value2 = 0x26766d474d9c2435ULL;
};

template<class ContainerAllocator>
struct DataType< ::dnb_msgs::ToastTranslation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dnb_msgs/ToastTranslation";
  }

  static const char* value(const ::dnb_msgs::ToastTranslation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dnb_msgs::ToastTranslation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string language_code\n"
"string value\n"
;
  }

  static const char* value(const ::dnb_msgs::ToastTranslation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dnb_msgs::ToastTranslation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.language_code);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ToastTranslation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dnb_msgs::ToastTranslation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dnb_msgs::ToastTranslation_<ContainerAllocator>& v)
  {
    s << indent << "language_code: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.language_code);
    s << indent << "value: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DNB_MSGS_MESSAGE_TOASTTRANSLATION_H
