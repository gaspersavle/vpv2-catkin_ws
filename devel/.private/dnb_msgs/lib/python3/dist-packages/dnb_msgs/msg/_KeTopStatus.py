# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dnb_msgs/KeTopStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class KeTopStatus(genpy.Message):
  _md5sum = "86f0ec71e85ea498020b5729ce416bde"
  _type = "dnb_msgs/KeTopStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 ACK_BUTTON=0
uint8 START_BUTTON=13
uint8 STEP_BUTTON=18
uint8 MENU_BUTTON=23
uint8[] buttons_active

bool second_active
bool teach_mode
bool auto_mode
bool enabling_key_pressed

uint8 WORLD=0
uint8 BASE=1
uint8 TOOL=2
uint8 JOINTS=3
uint8 jog_mode

string msg"""
  # Pseudo-constants
  ACK_BUTTON = 0
  START_BUTTON = 13
  STEP_BUTTON = 18
  MENU_BUTTON = 23
  WORLD = 0
  BASE = 1
  TOOL = 2
  JOINTS = 3

  __slots__ = ['buttons_active','second_active','teach_mode','auto_mode','enabling_key_pressed','jog_mode','msg']
  _slot_types = ['uint8[]','bool','bool','bool','bool','uint8','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       buttons_active,second_active,teach_mode,auto_mode,enabling_key_pressed,jog_mode,msg

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(KeTopStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.buttons_active is None:
        self.buttons_active = b''
      if self.second_active is None:
        self.second_active = False
      if self.teach_mode is None:
        self.teach_mode = False
      if self.auto_mode is None:
        self.auto_mode = False
      if self.enabling_key_pressed is None:
        self.enabling_key_pressed = False
      if self.jog_mode is None:
        self.jog_mode = 0
      if self.msg is None:
        self.msg = ''
    else:
      self.buttons_active = b''
      self.second_active = False
      self.teach_mode = False
      self.auto_mode = False
      self.enabling_key_pressed = False
      self.jog_mode = 0
      self.msg = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.buttons_active
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5B().pack(_x.second_active, _x.teach_mode, _x.auto_mode, _x.enabling_key_pressed, _x.jog_mode))
      _x = self.msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.buttons_active = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.second_active, _x.teach_mode, _x.auto_mode, _x.enabling_key_pressed, _x.jog_mode,) = _get_struct_5B().unpack(str[start:end])
      self.second_active = bool(self.second_active)
      self.teach_mode = bool(self.teach_mode)
      self.auto_mode = bool(self.auto_mode)
      self.enabling_key_pressed = bool(self.enabling_key_pressed)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.msg = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.msg = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.buttons_active
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5B().pack(_x.second_active, _x.teach_mode, _x.auto_mode, _x.enabling_key_pressed, _x.jog_mode))
      _x = self.msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.buttons_active = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.second_active, _x.teach_mode, _x.auto_mode, _x.enabling_key_pressed, _x.jog_mode,) = _get_struct_5B().unpack(str[start:end])
      self.second_active = bool(self.second_active)
      self.teach_mode = bool(self.teach_mode)
      self.auto_mode = bool(self.auto_mode)
      self.enabling_key_pressed = bool(self.enabling_key_pressed)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.msg = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.msg = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5B = None
def _get_struct_5B():
    global _struct_5B
    if _struct_5B is None:
        _struct_5B = struct.Struct("<5B")
    return _struct_5B
