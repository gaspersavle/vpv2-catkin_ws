# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/NestedUint8ArrayTestServiceRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class NestedUint8ArrayTestServiceRequest(genpy.Message):
  _md5sum = "287c5504f335b2f83a6aee90e3b61986"
  _type = "rospy_message_converter/NestedUint8ArrayTestServiceRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# service with nested types for testing purposes
NestedUint8ArrayTestMessage input


================================================================================
MSG: rospy_message_converter/NestedUint8ArrayTestMessage
# array of arrays for testing purposes
Uint8ArrayTestMessage[] arrays

================================================================================
MSG: rospy_message_converter/Uint8ArrayTestMessage
# Size-agnostic uint8 array for testing purposes
uint8[] data
"""
  __slots__ = ['input']
  _slot_types = ['rospy_message_converter/NestedUint8ArrayTestMessage']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       input

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NestedUint8ArrayTestServiceRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.input is None:
        self.input = rospy_message_converter.msg.NestedUint8ArrayTestMessage()
    else:
      self.input = rospy_message_converter.msg.NestedUint8ArrayTestMessage()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.input.arrays)
      buff.write(_struct_I.pack(length))
      for val1 in self.input.arrays:
        _x = val1.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.input is None:
        self.input = rospy_message_converter.msg.NestedUint8ArrayTestMessage()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.input.arrays = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Uint8ArrayTestMessage()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.data = str[start:end]
        self.input.arrays.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.input.arrays)
      buff.write(_struct_I.pack(length))
      for val1 in self.input.arrays:
        _x = val1.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.input is None:
        self.input = rospy_message_converter.msg.NestedUint8ArrayTestMessage()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.input.arrays = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Uint8ArrayTestMessage()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.data = str[start:end]
        self.input.arrays.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/NestedUint8ArrayTestServiceResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class NestedUint8ArrayTestServiceResponse(genpy.Message):
  _md5sum = "338d6242d9e71242debd0623f06ff2bd"
  _type = "rospy_message_converter/NestedUint8ArrayTestServiceResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
NestedUint8ArrayTestMessage output


================================================================================
MSG: rospy_message_converter/NestedUint8ArrayTestMessage
# array of arrays for testing purposes
Uint8ArrayTestMessage[] arrays

================================================================================
MSG: rospy_message_converter/Uint8ArrayTestMessage
# Size-agnostic uint8 array for testing purposes
uint8[] data
"""
  __slots__ = ['output']
  _slot_types = ['rospy_message_converter/NestedUint8ArrayTestMessage']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       output

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NestedUint8ArrayTestServiceResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.output is None:
        self.output = rospy_message_converter.msg.NestedUint8ArrayTestMessage()
    else:
      self.output = rospy_message_converter.msg.NestedUint8ArrayTestMessage()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.output.arrays)
      buff.write(_struct_I.pack(length))
      for val1 in self.output.arrays:
        _x = val1.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.output is None:
        self.output = rospy_message_converter.msg.NestedUint8ArrayTestMessage()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.output.arrays = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Uint8ArrayTestMessage()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.data = str[start:end]
        self.output.arrays.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.output.arrays)
      buff.write(_struct_I.pack(length))
      for val1 in self.output.arrays:
        _x = val1.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.output is None:
        self.output = rospy_message_converter.msg.NestedUint8ArrayTestMessage()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.output.arrays = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Uint8ArrayTestMessage()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.data = str[start:end]
        self.output.arrays.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class NestedUint8ArrayTestService(object):
  _type          = 'rospy_message_converter/NestedUint8ArrayTestService'
  _md5sum = '5eb791b1c2426cb63f1fa2ab8df04df3'
  _request_class  = NestedUint8ArrayTestServiceRequest
  _response_class = NestedUint8ArrayTestServiceResponse
