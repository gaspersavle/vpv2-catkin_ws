// Generated by gencpp from file context_action_framework/NextActionResponse.msg
// DO NOT EDIT!


#ifndef CONTEXT_ACTION_FRAMEWORK_MESSAGE_NEXTACTIONRESPONSE_H
#define CONTEXT_ACTION_FRAMEWORK_MESSAGE_NEXTACTIONRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace context_action_framework
{
template <class ContainerAllocator>
struct NextActionResponse_
{
  typedef NextActionResponse_<ContainerAllocator> Type;

  NextActionResponse_()
    : success(false)
    , uuid()
    , action_type(0)
    , action_block()  {
    }
  NextActionResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , uuid(_alloc)
    , action_type(0)
    , action_block(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _uuid_type;
  _uuid_type uuid;

   typedef int8_t _action_type_type;
  _action_type_type action_type;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _action_block_type;
  _action_block_type action_block;





  typedef boost::shared_ptr< ::context_action_framework::NextActionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::context_action_framework::NextActionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct NextActionResponse_

typedef ::context_action_framework::NextActionResponse_<std::allocator<void> > NextActionResponse;

typedef boost::shared_ptr< ::context_action_framework::NextActionResponse > NextActionResponsePtr;
typedef boost::shared_ptr< ::context_action_framework::NextActionResponse const> NextActionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::context_action_framework::NextActionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::context_action_framework::NextActionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::context_action_framework::NextActionResponse_<ContainerAllocator1> & lhs, const ::context_action_framework::NextActionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.uuid == rhs.uuid &&
    lhs.action_type == rhs.action_type &&
    lhs.action_block == rhs.action_block;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::context_action_framework::NextActionResponse_<ContainerAllocator1> & lhs, const ::context_action_framework::NextActionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace context_action_framework

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::context_action_framework::NextActionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::context_action_framework::NextActionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::context_action_framework::NextActionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::context_action_framework::NextActionResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::context_action_framework::NextActionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::context_action_framework::NextActionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::context_action_framework::NextActionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e4a831e270f9efe6df7081ae3c435bfa";
  }

  static const char* value(const ::context_action_framework::NextActionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe4a831e270f9efe6ULL;
  static const uint64_t static_value2 = 0xdf7081ae3c435bfaULL;
};

template<class ContainerAllocator>
struct DataType< ::context_action_framework::NextActionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "context_action_framework/NextActionResponse";
  }

  static const char* value(const ::context_action_framework::NextActionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::context_action_framework::NextActionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success # is able to provide next action\n"
"string uuid\n"
"int8 action_type\n"
"string action_block # json as string\n"
"\n"
"\n"
;
  }

  static const char* value(const ::context_action_framework::NextActionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::context_action_framework::NextActionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.uuid);
      stream.next(m.action_type);
      stream.next(m.action_block);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NextActionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::context_action_framework::NextActionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::context_action_framework::NextActionResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "uuid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.uuid);
    s << indent << "action_type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.action_type);
    s << indent << "action_block: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.action_block);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTEXT_ACTION_FRAMEWORK_MESSAGE_NEXTACTIONRESPONSE_H
