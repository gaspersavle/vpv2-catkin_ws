// Generated by gencpp from file context_action_framework/VisionDetectionResponse.msg
// DO NOT EDIT!


#ifndef CONTEXT_ACTION_FRAMEWORK_MESSAGE_VISIONDETECTIONRESPONSE_H
#define CONTEXT_ACTION_FRAMEWORK_MESSAGE_VISIONDETECTIONRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <context_action_framework/VisionDetails.h>
#include <sensor_msgs/Image.h>

namespace context_action_framework
{
template <class ContainerAllocator>
struct VisionDetectionResponse_
{
  typedef VisionDetectionResponse_<ContainerAllocator> Type;

  VisionDetectionResponse_()
    : success(false)
    , vision_details()
    , image()  {
    }
  VisionDetectionResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , vision_details(_alloc)
    , image(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef  ::context_action_framework::VisionDetails_<ContainerAllocator>  _vision_details_type;
  _vision_details_type vision_details;

   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _image_type;
  _image_type image;





  typedef boost::shared_ptr< ::context_action_framework::VisionDetectionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::context_action_framework::VisionDetectionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct VisionDetectionResponse_

typedef ::context_action_framework::VisionDetectionResponse_<std::allocator<void> > VisionDetectionResponse;

typedef boost::shared_ptr< ::context_action_framework::VisionDetectionResponse > VisionDetectionResponsePtr;
typedef boost::shared_ptr< ::context_action_framework::VisionDetectionResponse const> VisionDetectionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::context_action_framework::VisionDetectionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::context_action_framework::VisionDetectionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::context_action_framework::VisionDetectionResponse_<ContainerAllocator1> & lhs, const ::context_action_framework::VisionDetectionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.vision_details == rhs.vision_details &&
    lhs.image == rhs.image;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::context_action_framework::VisionDetectionResponse_<ContainerAllocator1> & lhs, const ::context_action_framework::VisionDetectionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace context_action_framework

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::context_action_framework::VisionDetectionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::context_action_framework::VisionDetectionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::context_action_framework::VisionDetectionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::context_action_framework::VisionDetectionResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::context_action_framework::VisionDetectionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::context_action_framework::VisionDetectionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::context_action_framework::VisionDetectionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "50e0aca8c3242d4d762f814436daab91";
  }

  static const char* value(const ::context_action_framework::VisionDetectionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x50e0aca8c3242d4dULL;
  static const uint64_t static_value2 = 0x762f814436daab91ULL;
};

template<class ContainerAllocator>
struct DataType< ::context_action_framework::VisionDetectionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "context_action_framework/VisionDetectionResponse";
  }

  static const char* value(const ::context_action_framework::VisionDetectionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::context_action_framework::VisionDetectionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success\n"
"context_action_framework/VisionDetails vision_details\n"
"sensor_msgs/Image image\n"
"\n"
"================================================================================\n"
"MSG: context_action_framework/VisionDetails\n"
"Header header\n"
"time camera_acquisition_stamp\n"
"bool gap_detection\n"
"context_action_framework/Detection[] detections\n"
"context_action_framework/Gap[] gaps\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: context_action_framework/Detection\n"
"int64 id\n"
"int64 tracking_id\n"
"\n"
"int8 label    # Label intEnum\n"
"float32 score # segmentation score\n"
"\n"
"# in pixel coords\n"
"geometry_msgs/Transform tf_px   # transform of object center\n"
"float32[] box_px                # non-oriented bounding box\n"
"float32[] obb_px                # oriented bounding box\n"
"float32[] center_px\n"
"float32[] polygon_px\n"
"\n"
"# in world coords (meters)\n"
"geometry_msgs/Transform tf\n"
"float32[] box\n"
"float32[] obb\n"
"float32[] center\n"
"float32[] polygon\n"
"\n"
"# in world coords the cuboid containing the object\n"
"float32[] obb_3d\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: context_action_framework/Gap\n"
"int8 id\n"
"\n"
"# transform start of levering\n"
"geometry_msgs/Transform from_tf\n"
"\n"
"# transform end of levering\n"
"geometry_msgs/Transform to_tf\n"
"\n"
"# depth in meters\n"
"float32 from_depth\n"
"float32 to_depth\n"
"\n"
"# on which detection does the levering start\n"
"# context_action_framework/Detection from_det\n"
"\n"
"# on/in which detection does the levering end\n"
"# context_action_framework/Detection to_det\n"
"\n"
"# oriented bounding box of gap (meters)\n"
"float32[] obb\n"
"\n"
"# 3d oriented bounding box of gap (meters)\n"
"float32[] obb_3d\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
;
  }

  static const char* value(const ::context_action_framework::VisionDetectionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::context_action_framework::VisionDetectionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.vision_details);
      stream.next(m.image);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VisionDetectionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::context_action_framework::VisionDetectionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::context_action_framework::VisionDetectionResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "vision_details: ";
    s << std::endl;
    Printer< ::context_action_framework::VisionDetails_<ContainerAllocator> >::stream(s, indent + "  ", v.vision_details);
    s << indent << "image: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.image);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTEXT_ACTION_FRAMEWORK_MESSAGE_VISIONDETECTIONRESPONSE_H
