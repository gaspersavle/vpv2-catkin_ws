// Generated by gencpp from file context_action_framework/Gap.msg
// DO NOT EDIT!


#ifndef CONTEXT_ACTION_FRAMEWORK_MESSAGE_GAP_H
#define CONTEXT_ACTION_FRAMEWORK_MESSAGE_GAP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Transform.h>
#include <geometry_msgs/Transform.h>

namespace context_action_framework
{
template <class ContainerAllocator>
struct Gap_
{
  typedef Gap_<ContainerAllocator> Type;

  Gap_()
    : id(0)
    , from_tf()
    , to_tf()
    , from_depth(0.0)
    , to_depth(0.0)
    , obb()
    , obb_3d()  {
    }
  Gap_(const ContainerAllocator& _alloc)
    : id(0)
    , from_tf(_alloc)
    , to_tf(_alloc)
    , from_depth(0.0)
    , to_depth(0.0)
    , obb(_alloc)
    , obb_3d(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _id_type;
  _id_type id;

   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _from_tf_type;
  _from_tf_type from_tf;

   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _to_tf_type;
  _to_tf_type to_tf;

   typedef float _from_depth_type;
  _from_depth_type from_depth;

   typedef float _to_depth_type;
  _to_depth_type to_depth;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _obb_type;
  _obb_type obb;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _obb_3d_type;
  _obb_3d_type obb_3d;





  typedef boost::shared_ptr< ::context_action_framework::Gap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::context_action_framework::Gap_<ContainerAllocator> const> ConstPtr;

}; // struct Gap_

typedef ::context_action_framework::Gap_<std::allocator<void> > Gap;

typedef boost::shared_ptr< ::context_action_framework::Gap > GapPtr;
typedef boost::shared_ptr< ::context_action_framework::Gap const> GapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::context_action_framework::Gap_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::context_action_framework::Gap_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::context_action_framework::Gap_<ContainerAllocator1> & lhs, const ::context_action_framework::Gap_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.from_tf == rhs.from_tf &&
    lhs.to_tf == rhs.to_tf &&
    lhs.from_depth == rhs.from_depth &&
    lhs.to_depth == rhs.to_depth &&
    lhs.obb == rhs.obb &&
    lhs.obb_3d == rhs.obb_3d;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::context_action_framework::Gap_<ContainerAllocator1> & lhs, const ::context_action_framework::Gap_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace context_action_framework

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::context_action_framework::Gap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::context_action_framework::Gap_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::context_action_framework::Gap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::context_action_framework::Gap_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::context_action_framework::Gap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::context_action_framework::Gap_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::context_action_framework::Gap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "04982284393a444a6964750bac3d43bb";
  }

  static const char* value(const ::context_action_framework::Gap_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x04982284393a444aULL;
  static const uint64_t static_value2 = 0x6964750bac3d43bbULL;
};

template<class ContainerAllocator>
struct DataType< ::context_action_framework::Gap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "context_action_framework/Gap";
  }

  static const char* value(const ::context_action_framework::Gap_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::context_action_framework::Gap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 id\n"
"\n"
"# transform start of levering\n"
"geometry_msgs/Transform from_tf\n"
"\n"
"# transform end of levering\n"
"geometry_msgs/Transform to_tf\n"
"\n"
"# depth in meters\n"
"float32 from_depth\n"
"float32 to_depth\n"
"\n"
"# on which detection does the levering start\n"
"# context_action_framework/Detection from_det\n"
"\n"
"# on/in which detection does the levering end\n"
"# context_action_framework/Detection to_det\n"
"\n"
"# oriented bounding box of gap (meters)\n"
"float32[] obb\n"
"\n"
"# 3d oriented bounding box of gap (meters)\n"
"float32[] obb_3d\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::context_action_framework::Gap_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::context_action_framework::Gap_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.from_tf);
      stream.next(m.to_tf);
      stream.next(m.from_depth);
      stream.next(m.to_depth);
      stream.next(m.obb);
      stream.next(m.obb_3d);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Gap_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::context_action_framework::Gap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::context_action_framework::Gap_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.id);
    s << indent << "from_tf: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.from_tf);
    s << indent << "to_tf: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.to_tf);
    s << indent << "from_depth: ";
    Printer<float>::stream(s, indent + "  ", v.from_depth);
    s << indent << "to_depth: ";
    Printer<float>::stream(s, indent + "  ", v.to_depth);
    s << indent << "obb[]" << std::endl;
    for (size_t i = 0; i < v.obb.size(); ++i)
    {
      s << indent << "  obb[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.obb[i]);
    }
    s << indent << "obb_3d[]" << std::endl;
    for (size_t i = 0; i < v.obb_3d.size(); ++i)
    {
      s << indent << "  obb_3d[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.obb_3d[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTEXT_ACTION_FRAMEWORK_MESSAGE_GAP_H
