// Generated by gencpp from file context_action_framework/Detection.msg
// DO NOT EDIT!


#ifndef CONTEXT_ACTION_FRAMEWORK_MESSAGE_DETECTION_H
#define CONTEXT_ACTION_FRAMEWORK_MESSAGE_DETECTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Transform.h>
#include <geometry_msgs/Transform.h>

namespace context_action_framework
{
template <class ContainerAllocator>
struct Detection_
{
  typedef Detection_<ContainerAllocator> Type;

  Detection_()
    : id(0)
    , tracking_id(0)
    , label(0)
    , score(0.0)
    , tf_px()
    , box_px()
    , obb_px()
    , center_px()
    , polygon_px()
    , tf()
    , box()
    , obb()
    , center()
    , polygon()
    , obb_3d()  {
    }
  Detection_(const ContainerAllocator& _alloc)
    : id(0)
    , tracking_id(0)
    , label(0)
    , score(0.0)
    , tf_px(_alloc)
    , box_px(_alloc)
    , obb_px(_alloc)
    , center_px(_alloc)
    , polygon_px(_alloc)
    , tf(_alloc)
    , box(_alloc)
    , obb(_alloc)
    , center(_alloc)
    , polygon(_alloc)
    , obb_3d(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _id_type;
  _id_type id;

   typedef int64_t _tracking_id_type;
  _tracking_id_type tracking_id;

   typedef int8_t _label_type;
  _label_type label;

   typedef float _score_type;
  _score_type score;

   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _tf_px_type;
  _tf_px_type tf_px;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _box_px_type;
  _box_px_type box_px;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _obb_px_type;
  _obb_px_type obb_px;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _center_px_type;
  _center_px_type center_px;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _polygon_px_type;
  _polygon_px_type polygon_px;

   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _tf_type;
  _tf_type tf;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _box_type;
  _box_type box;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _obb_type;
  _obb_type obb;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _center_type;
  _center_type center;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _polygon_type;
  _polygon_type polygon;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _obb_3d_type;
  _obb_3d_type obb_3d;





  typedef boost::shared_ptr< ::context_action_framework::Detection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::context_action_framework::Detection_<ContainerAllocator> const> ConstPtr;

}; // struct Detection_

typedef ::context_action_framework::Detection_<std::allocator<void> > Detection;

typedef boost::shared_ptr< ::context_action_framework::Detection > DetectionPtr;
typedef boost::shared_ptr< ::context_action_framework::Detection const> DetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::context_action_framework::Detection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::context_action_framework::Detection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::context_action_framework::Detection_<ContainerAllocator1> & lhs, const ::context_action_framework::Detection_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.tracking_id == rhs.tracking_id &&
    lhs.label == rhs.label &&
    lhs.score == rhs.score &&
    lhs.tf_px == rhs.tf_px &&
    lhs.box_px == rhs.box_px &&
    lhs.obb_px == rhs.obb_px &&
    lhs.center_px == rhs.center_px &&
    lhs.polygon_px == rhs.polygon_px &&
    lhs.tf == rhs.tf &&
    lhs.box == rhs.box &&
    lhs.obb == rhs.obb &&
    lhs.center == rhs.center &&
    lhs.polygon == rhs.polygon &&
    lhs.obb_3d == rhs.obb_3d;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::context_action_framework::Detection_<ContainerAllocator1> & lhs, const ::context_action_framework::Detection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace context_action_framework

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::context_action_framework::Detection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::context_action_framework::Detection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::context_action_framework::Detection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::context_action_framework::Detection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::context_action_framework::Detection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::context_action_framework::Detection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::context_action_framework::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c6460d311263f3f77c554ecaf759ce2c";
  }

  static const char* value(const ::context_action_framework::Detection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc6460d311263f3f7ULL;
  static const uint64_t static_value2 = 0x7c554ecaf759ce2cULL;
};

template<class ContainerAllocator>
struct DataType< ::context_action_framework::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "context_action_framework/Detection";
  }

  static const char* value(const ::context_action_framework::Detection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::context_action_framework::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 id\n"
"int64 tracking_id\n"
"\n"
"int8 label    # Label intEnum\n"
"float32 score # segmentation score\n"
"\n"
"# in pixel coords\n"
"geometry_msgs/Transform tf_px   # transform of object center\n"
"float32[] box_px                # non-oriented bounding box\n"
"float32[] obb_px                # oriented bounding box\n"
"float32[] center_px\n"
"float32[] polygon_px\n"
"\n"
"# in world coords (meters)\n"
"geometry_msgs/Transform tf\n"
"float32[] box\n"
"float32[] obb\n"
"float32[] center\n"
"float32[] polygon\n"
"\n"
"# in world coords the cuboid containing the object\n"
"float32[] obb_3d\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::context_action_framework::Detection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::context_action_framework::Detection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.tracking_id);
      stream.next(m.label);
      stream.next(m.score);
      stream.next(m.tf_px);
      stream.next(m.box_px);
      stream.next(m.obb_px);
      stream.next(m.center_px);
      stream.next(m.polygon_px);
      stream.next(m.tf);
      stream.next(m.box);
      stream.next(m.obb);
      stream.next(m.center);
      stream.next(m.polygon);
      stream.next(m.obb_3d);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Detection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::context_action_framework::Detection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::context_action_framework::Detection_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
    s << indent << "tracking_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.tracking_id);
    s << indent << "label: ";
    Printer<int8_t>::stream(s, indent + "  ", v.label);
    s << indent << "score: ";
    Printer<float>::stream(s, indent + "  ", v.score);
    s << indent << "tf_px: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.tf_px);
    s << indent << "box_px[]" << std::endl;
    for (size_t i = 0; i < v.box_px.size(); ++i)
    {
      s << indent << "  box_px[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.box_px[i]);
    }
    s << indent << "obb_px[]" << std::endl;
    for (size_t i = 0; i < v.obb_px.size(); ++i)
    {
      s << indent << "  obb_px[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.obb_px[i]);
    }
    s << indent << "center_px[]" << std::endl;
    for (size_t i = 0; i < v.center_px.size(); ++i)
    {
      s << indent << "  center_px[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.center_px[i]);
    }
    s << indent << "polygon_px[]" << std::endl;
    for (size_t i = 0; i < v.polygon_px.size(); ++i)
    {
      s << indent << "  polygon_px[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.polygon_px[i]);
    }
    s << indent << "tf: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.tf);
    s << indent << "box[]" << std::endl;
    for (size_t i = 0; i < v.box.size(); ++i)
    {
      s << indent << "  box[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.box[i]);
    }
    s << indent << "obb[]" << std::endl;
    for (size_t i = 0; i < v.obb.size(); ++i)
    {
      s << indent << "  obb[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.obb[i]);
    }
    s << indent << "center[]" << std::endl;
    for (size_t i = 0; i < v.center.size(); ++i)
    {
      s << indent << "  center[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.center[i]);
    }
    s << indent << "polygon[]" << std::endl;
    for (size_t i = 0; i < v.polygon.size(); ++i)
    {
      s << indent << "  polygon[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.polygon[i]);
    }
    s << indent << "obb_3d[]" << std::endl;
    for (size_t i = 0; i < v.obb_3d.size(); ++i)
    {
      s << indent << "  obb_3d[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.obb_3d[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTEXT_ACTION_FRAMEWORK_MESSAGE_DETECTION_H
