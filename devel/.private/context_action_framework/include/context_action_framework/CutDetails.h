// Generated by gencpp from file context_action_framework/CutDetails.msg
// DO NOT EDIT!


#ifndef CONTEXT_ACTION_FRAMEWORK_MESSAGE_CUTDETAILS_H
#define CONTEXT_ACTION_FRAMEWORK_MESSAGE_CUTDETAILS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace context_action_framework
{
template <class ContainerAllocator>
struct CutDetails_
{
  typedef CutDetails_<ContainerAllocator> Type;

  CutDetails_()
    : todo(0.0)  {
    }
  CutDetails_(const ContainerAllocator& _alloc)
    : todo(0.0)  {
  (void)_alloc;
    }



   typedef float _todo_type;
  _todo_type todo;





  typedef boost::shared_ptr< ::context_action_framework::CutDetails_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::context_action_framework::CutDetails_<ContainerAllocator> const> ConstPtr;

}; // struct CutDetails_

typedef ::context_action_framework::CutDetails_<std::allocator<void> > CutDetails;

typedef boost::shared_ptr< ::context_action_framework::CutDetails > CutDetailsPtr;
typedef boost::shared_ptr< ::context_action_framework::CutDetails const> CutDetailsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::context_action_framework::CutDetails_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::context_action_framework::CutDetails_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::context_action_framework::CutDetails_<ContainerAllocator1> & lhs, const ::context_action_framework::CutDetails_<ContainerAllocator2> & rhs)
{
  return lhs.todo == rhs.todo;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::context_action_framework::CutDetails_<ContainerAllocator1> & lhs, const ::context_action_framework::CutDetails_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace context_action_framework

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::context_action_framework::CutDetails_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::context_action_framework::CutDetails_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::context_action_framework::CutDetails_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::context_action_framework::CutDetails_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::context_action_framework::CutDetails_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::context_action_framework::CutDetails_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::context_action_framework::CutDetails_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7247be45b9ecdbee81d0c07f3e7f1ab8";
  }

  static const char* value(const ::context_action_framework::CutDetails_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7247be45b9ecdbeeULL;
  static const uint64_t static_value2 = 0x81d0c07f3e7f1ab8ULL;
};

template<class ContainerAllocator>
struct DataType< ::context_action_framework::CutDetails_<ContainerAllocator> >
{
  static const char* value()
  {
    return "context_action_framework/CutDetails";
  }

  static const char* value(const ::context_action_framework::CutDetails_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::context_action_framework::CutDetails_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 todo\n"
;
  }

  static const char* value(const ::context_action_framework::CutDetails_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::context_action_framework::CutDetails_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.todo);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CutDetails_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::context_action_framework::CutDetails_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::context_action_framework::CutDetails_<ContainerAllocator>& v)
  {
    s << indent << "todo: ";
    Printer<float>::stream(s, indent + "  ", v.todo);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTEXT_ACTION_FRAMEWORK_MESSAGE_CUTDETAILS_H
